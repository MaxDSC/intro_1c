#Область ПрограммныйИнтерфейс
// Получить выборку по тексту запроса.
// 
// Параметры:
//  ТекстЗапроса - Строка - запрос.
//  ИмяПарам - Строка - название параметра из текста запроса.
//  Парам - Произвольный - параметр запроса, на которое ссылкается имя.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Получить выборку
Функция ПолучитьВыборку(ТекстЗапроса, ИмяПарам = Неопределено, Парам = Неопределено) Экспорт
	//TODO: можно добавить проверки и исключения.
	Запр = Новый Запрос(ТекстЗапроса);
	Если ИмяПарам <> Неопределено И Парам <> Неопределено Тогда
		Запр.УстановитьПараметр(ИмяПарам, Парам);
	КонецЕсли;
	Возврат Запр.Выполнить().Выбрать();
КонецФункции

// Помещает в массив данные из одной колонки выборки.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка из запроса.
//  Колонка - Произвольный - имя колонки, должно соответствовать ВыборкаИзРезультатаЗапроса.ИмяПоля.
// 
// Возвращаемое значение:
//  Массив из Произвольный - вернет массив соответствующие типа из колонки.
Функция ВМассивПоКолонке(Выборка, Колонка) Экспорт
	//TODO: массив может быть фиксированным -> Выборка.Количество(), будет ли лучше?
	Масс = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Масс.Добавить(Колонка);
	КонецЦикла;
	Возврат Масс;
КонецФункции

// Извлекает значение одиночной выборки.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка из запроса.
//  Колонка - Произвольный - имя колонки, должно соответствовать ВыборкаИзРезультатаЗапроса.ИмяПоля.
// 
// Возвращаемое значение:
//   Произвольный - вернет значение колонки,
//   Неопределено - если выборка пуста.
//  
Функция Извлечь(Выборка, Колонка) Экспорт
	Если Выборка.Следующий() Тогда
		Возврат Колонка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Выполнить запрос по полю.
// 
// Параметры:
//  ТекстЗапроса - Строка - запрос.
//  Поле - Строка - название поля, по которому надо сделать выборку
//  ИмяПарам - Строка, Неопределено - имя параметра внутри текста запроса.
//  Парам - Произвольный, Неопределено - значение параметра, которое надо подставить в запросе.
// 
// Возвращаемое значение:
//  Массив из Произвольный - массив с типом данных по полю, если в выборе много записей.
//  Произвольный - если в выборе только одна запись.
//  Неопределено  если результат запроса пуст.
Функция ВыполнитьЗапросПоПолю(ТекстЗапроса, Поле, ИмяПарам = Неопределено, Парам = Неопределено) Экспорт
	Запр = Новый Запрос(ТекстЗапроса);
	Если ИмяПарам <> Неопределено И Парам <> Неопределено Тогда
		Запр.УстановитьПараметр(ИмяПарам, Парам);
	КонецЕсли;
	РезультатЗапроса = Запр.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Колонка = РезультатЗапроса.Колонки.Найти(Поле);
		Индекс =  РезультатЗапроса.Колонки.Индекс(Колонка);
		Выборка = РезультатЗапроса.Выбрать();
		Масс = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Масс.Добавить(Выборка[Индекс]);
		КонецЦикла;
		Если Масс.Количество() = 1 Тогда
			Возврат Масс[0];
		ИначеЕсли (Масс.Количество() > 1) Тогда
			Возврат Масс;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Получить ссылку по коду. Код должен быть уникальным, иначе будет вызвано исключение.
// 
// Параметры:
//  НазваниеОбъекта - Строка - объект, к которому выполняется запрос.
//  Код - Строка, Число - Код
// 
// Возвращаемое значение:
// 	СправочникСсылка - ссылка соответствующая уникальному коду.
//  Неопределено - если выборка пуста.
Функция ПолучитьСсылкуПоКоду(НазваниеОбъекта, Код) Экспорт
	ТекстЗапроса = СтрШаблон("ВЫБРАТЬ Ссылка ИЗ %1 ГДЕ Код=%2", НазваниеОбъекта, Код);
	Выборка = ПолучитьВыборку(ТекстЗапроса);
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		ВызватьИсключение "Нарушение уникальности кода";
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
#КонецОбласти